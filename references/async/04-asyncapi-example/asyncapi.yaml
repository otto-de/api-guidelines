asyncapi: 2.6.0
info:
  title: OTTO example AsyncAPI
  version: 1.0.0
  description: |
    ## OTTO Guideline compatible API spec
    This spec has the following features:
     - JSON schema is kept separate from the AsyncAPI spec.
     - Traits are used to define the common CloudEvent header.
     - Applies OTTO naming conventions.
     - Documentation of Kafka security measures.
     - Versioning of incompatible changes

    It uses a simple fictional example of an account service that emits the following events:
     - `de.otto.events.account-management.account.created.v1`
     - `de.otto.events.account-management.account.blocked.v1`
     - `de.otto.events.account-management.account.unblocked.v1`
     - `de.otto.events.account-management.account.deleted.v1`
     - `de.otto.events.account-management.account.created.v2` -- incompatible change
     - `de.otto.data.account-management.account.v1`
     - `de.otto.data.account-management.account.v2` -- incompatible change
servers:
  test:
    url: "test.mykafkacluster.org:8092"
    protocol: kafka-secure
    description: Test broker
    security:
      - saslSsl: []
channels:
  # The name of the kafka topic containing the domain events. See https://api.otto.de/portal/guidelines/r200006
  "de.otto.events.account-management.account":
    # State in the channel item description all relevant topic configurations for API consumers.
    # Also state your order guarantee (see https://api.otto.de/portal/guidelines/r200007)
    description: |
      This topic contains all domain events related to an account. 

      Events are guaranteed to appear in order for each account.
    bindings:
      kafka:
        topicConfiguration:
          cleanup.policy: "delete"
          retention.ms: 259200000 #72 hours
    subscribe:
      description: |
        Subscribe to all events related to an account. Make sure to filter
        all consumed events by the CloudEvent type.
      operationId: consumeAccountEvents
      message:
        oneOf:
          # Incompatible versions of domain events will be published to the same topic.
          # See https://api.otto.de/portal/guidelines/r200017
          - $ref: "#/components/messages/accountCreatedV1"
          - $ref: "#/components/messages/accountCreatedV2"
          - $ref: "#/components/messages/accountBlocked"
          - $ref: "#/components/messages/accountUnblocked"
          - $ref: "#/components/messages/accountDeleted"
  # The name of the kafka topic containing the data event v1.
  # See https://api.otto.de/portal/guidelines/r200006
  "de.otto.data.account-management.account.v1":
    # The description explicitly mentions the semantic meaning of kafka tombstones.
    description: |
      **DEPRECATED**: use `de.otto.data.account-management.account.v2` instead.

      **SUNSET**: 2022-12-01

      This topic contains `de.otto.data.account-management.account.v1` events for the account type. 

      Events are guaranteed to appear in order for each account.

      A tombstone signals a deleted account.
    deprecated: true
    bindings:
      kafka:
        topicConfiguration:
          cleanup.policy: compact
          delete.retention.ms: 86400000 # 1 day
    subscribe:
      operationId: consumeAccountDataEventsV1
      message:
        oneOf:
          - $ref: "#/components/messages/accountDataEventV1"
          - $ref: "#/components/messages/accountDataDeletedEventV1"
  # Incompatible versions of data event will be published to a separate topic.
  # See https://api.otto.de/portal/guidelines/r200016
  "de.otto.data.account-management.account.v2":
    description: |
      This topic contains `de.otto.data.account-management.account.v2` for the account type. 

      Events are guaranteed to appear in order for each account.

      A tombstone signals a deleted account.
    bindings:
      kafka:
        topicConfiguration:
          cleanup.policy: compact
          delete.retention.ms: 86400000 # 1 day
    subscribe:
      operationId: consumeAccountDataEventsV2
      message:
        oneOf:
          - $ref: "#/components/messages/accountDataEventV2"
          - $ref: "#/components/messages/accountDataDeletedEventV2"
components:
  messages:
    accountCreatedV1:
      name: accountCreated.v1
      title: Account created v1
      deprecated: true
      description: |
        **DEPRECATED**: use `de.otto.events.account-management.account.created.v2` instead.

        **SUNSET**: 2022-12-01

        Indicates that a new account has been created.
      contentType: application/json
      traits:
        # The accountEvent trait is used to extract common properties of all messages.
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-created-v1.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.events.account-management.account.created.v1"]
    accountCreatedV2:
      name: accountCreated.v2
      title: Account created v2
      description: |
        Indicates that a new account has been created.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-created-v2.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.events.account-management.account.created.v2"]
    accountBlocked:
      name: accountBlocked
      title: Account blocked
      description: |
        Indicates that an account has been blocked.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-blocked-v1.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.events.account-management.account.blocked.v1"]
    accountUnblocked:
      name: accountUnblocked
      title: Account unblocked
      description: |
        Indicates that an account has been unblocked.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-unblocked-v1.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.events.account-management.account.unblocked.v1"]
    accountDeleted:
      name: accountDeleted
      title: Account deleted
      description: |
        Indicates that an account has been deleted.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-deleted-v1.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.events.account-management.account.deleted.v1"]
    accountDataEventV1:
      name: accountDataEvent.v1
      title: Account data event v1
      deprecated: true
      description: |
        An event that is being emitted whenever the the state of an account changes. Contains the whole state of the account.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-data-v1.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.data.account-management.account.v1"]
    accountDataDeletedEventV1:
      name: accountDataDeletedEvent.v1
      title: Account deleted (data event) v1
      deprecated: true
      description: |
        A tombstone event indicates that the account has been deleted.
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.data.account-management.account.v1"]
    accountDataEventV2:
      name: accountDataEvent.v2
      title: Account data event v2
      description: |
        An event that is being emitted whenever the the state of an account changes. Contains the whole state of the account.
      contentType: application/json
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      payload:
        $ref: "schemas/account-data-v2.schema.json"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.data.account-management.account.v2"]
    accountDataDeletedEventV2:
      name: accountDataDeletedEvent.v2
      title: Account deleted (data event) v2
      description: |
        A tombstone event indicates that the account has been deleted.
      traits:
        - $ref: "#/components/messageTraits/accountEvent"
      headers:
        properties:
          ce_type:
            enum: ["de.otto.data.account-management.account.v2"]
  securitySchemes:
    saslSsl:
      type: userPassword
      description: Provide your username (api key) and password (secret) for SASL/PLAIN authentication over TLS 1.2.
  schemas:
    AccountId:
      description: The identification of an account.
      type: string
  messageTraits:
    accountEvent:
      schemaFormat: "application/schema+json;version=draft-07"
      headers:
        # Guidelines for CloudEvent attributes: https://api.otto.de/portal/guidelines/r200001
        description: CloudEvent headers as defined in the CloudEvent spec.
        type: object
        properties:
          ce_id:
            description: The ID of the event. See https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id
            type: string
          ce_type:
            description: |
              The type of event. See https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type
            type: string
          ce_source:
            description: |
              The source of the account event. In case of this account mangement API, 
              the source is always the account entity emitting the event. 
              The ID of the account is part of the source header but should not be extracted from it.
              See https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1
            type: string
            example: "//api.otto.de/account-management/accounts/1234-account-id"
          ce_specversion:
            description: See https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion
            type: string
            enum: ["1.0"]
          ce_time:
            description: See https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#time
            type: string
            format: date-time
            example: "1990-12-31T23:59:60Z"
          ce_test:
            description: See https://api.otto.de/portal/guidelines/r200021
            type: string
            example: "account-mangement.performancetest"
        required:
          - ce_id
          - ce_source
          - ce_specversion
          - ce_time
          - ce_type
      bindings:
        kafka:
          key:
            $ref: "#/components/schemas/AccountId"
            schemaIdLocation: payload
            schemaIdPayloadEncoding: confluent
